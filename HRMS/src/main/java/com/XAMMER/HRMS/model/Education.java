package com.XAMMER.HRMS.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import lombok.Data; // Provides getters, setters, equals, hashCode, toString
import lombok.EqualsAndHashCode; // For fine-grained control over equals/hashCode
import lombok.ToString; // For fine-grained control over toString

// Using @Data means you generally don't need manual getters, setters, toString, equals, hashCode
@Entity
@Table(name = "educations") // Ensure this matches your actual table name in the DB
@Data // This annotation generates boilerplate code
public class Education {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String level;
    private String degree;
    private String fieldOfStudy;
    private String institute;
    private Integer year; // Or String if you prefer
    private String score;

    @Column(name = "username")
        private String username;

    // S3 specific fields
    private String certS3Key; // Store the S3 object key
    private String certOriginalFilename;

    // Removed 'private String username;' as it's redundant when linked to User
    // If you explicitly need denormalization, consider why and how to manage consistency.

    @ManyToOne(fetch = FetchType.LAZY)
    // *** CRITICAL CHANGE HERE: Match the column name to your database if it's 'user_id' ***
    @JoinColumn(name = "user_id", nullable = false)
    @JsonBackReference("user-educations")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private User employee;

    // Custom getter for S3 URL - KEEP THIS ONE as it contains specific logic
    // public String getCertUrl() {
    //     if (this.certS3Key != null && !this.certS3Key.isEmpty()) {
    //         // Confirm your S3 region and bucket name
    //         // Example for ap-south-1 (Mumbai) and bucket 'xrms-document-bucket'
    //         return "https://xrms-document-bucket.s3.ap-south-1.amazonaws.com/" + this.certS3Key;
    //     }
    //     return null; // Return null if key is not present
    // }

    // --- No need for explicit constructors if you use @NoArgsConstructor and @AllArgsConstructor from Lombok on the class ---
    // public Education() {} // @NoArgsConstructor handles this
    // If you don't use @AllArgsConstructor, you might need specific constructors for creation.

    // --- All other getters and setters are automatically generated by @Data ---
    // You do NOT need to write:
    // public Long getId() { return id; }
    // public void setId(Long id) { this.id = id; }
    // public String getLevel() { return level; }
    // public void setLevel(String level) { this.level = level; }
    // ... and so on for all other fields. Lombok does this!

    // The @Override toString() method is also generated by @Data.
    // If you want a custom toString, you can provide it, but then @Data won't override it.
    // However, ensure you manage circular references if you include 'employee' in it.
}